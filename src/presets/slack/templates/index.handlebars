{{>partials_head}}
<body>
  <div id="layout" class="pure-g">
    {{#with activeSlack}}
      {{#> partials_topbar
        user_id=user_id
        profile=profile
        team=team
        current_status=current_status
      }}
        {{#*inline "breadcrumbs"}}
          <li>
            <a href="{{ route "slackPresetsList" user_id=user_id }}">
              presets
            </a>
          </li>
        {{/inline}}
      {{/ partials_topbar }}
    {{/with}}

    <div class="pure-u-1">
      <form
        class="preset-row status-form"
        method="post"
        action="{{ route "slackPresetAdd" user_id=activeSlack.user_id }}"
      >
        <input type="hidden" name="_csrf" value="{{@csrfToken}}">
        {{! chrome doesn't support flexbox in `<fieldset>` }}
        <div role="group" class="status">
          <label for="status-form-status_emoji" class="status_emoji">
            <span class="current-emoji">üí¨</span>
          </label>
          <input
            id="status-form-status_emoji"
            type="text"
            name="status_emoji"
            list="emoji_datalist"
            aria-label="emoji"
            placeholder="emoji"
          >
          <hr>
          <input
            type="text"
            name="status_text"
            placeholder="text"
            class="status_text"
          >
        </div>
        <div style="width: 0.5em;"></div>
        <button type="submit">save</button>
      </form>

      {{#each presets}}
        <form
          class="preset-row"
          method="post"
          action="{{ route "slackPresetUse" user_id=@root.activeSlack.user_id }}"
          {{#if is_current_status}}disabled{{/if}}
        >
          <a
            class="status"
            href="{{ route "slackPresetId"
              user_id=@root.activeSlack.user_id
              ?status_emoji=status_emoji
              ?status_text=status_text }}"
          >
            {{>partials_status .}}
          </a>
          <a
            class="deeper"
            role="presentation"
            href="{{ route "slackPresetId"
              user_id=@root.activeSlack.user_id
              ?status_emoji=status_emoji
              ?status_text=status_text }}"
          >
            ‚ùØ
          </a>
          <input type="hidden" name="_csrf" value="{{@csrfToken}}">
          <input type="hidden" name="status_emoji" value="{{status_emoji}}">
          <input type="hidden" name="status_text" value="{{status_text}}">
          {{#if is_current_status}}
            <button type="submit" disabled>current</button>
          {{else}}
            <button type="submit">use</button>
          {{/if}}
        </form>
      {{/each}}

      <datalist id="emoji_datalist">
        {{#each emoji_options}}
          <option value="{{name}}" data-html="{{html}}"></option>
        {{/each}}
      </datalist>
    </div>
  </div>
  <script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function () {
      function getDatalistOption(list, value) {
        return list.querySelector('[value="' + value +'"]');
      }

      function updateCurrentEmoji(event) {
        var form = event.target.form;
        var value = event.target.value.trim();

        if (!value) {
          value = "speech_balloon";
        }

        var datalistOption = getDatalistOption(event.target.list, value);
        var target = event.target

        if (datalistOption) {
          event.target.setCustomValidity("");
          form.querySelector('.current-emoji').innerHTML = datalistOption.dataset.html;
        } else {
          event.target.setCustomValidity("emoji not found");
          form.querySelector('.current-emoji').innerHTML = "<div class='custom-emoji'>‚òπÔ∏é</div>";
          form.querySelector('.current-emoji').title = event.target.validationMessage;
          event.target.reportValidity();
        }
      }

      Array.prototype.forEach.call(
        document.querySelectorAll('input[list="emoji_datalist"]'),
        function (input) {
          input.addEventListener("change", updateCurrentEmoji);
        }
      )

      function updateRequiredFields(event) {
        var form = event.target.form;

        if (form.status_text.value) {
          form.status_emoji.removeAttribute("required");
        } else {
          form.status_emoji.setAttribute("required", "required");
        }

        if (form.status_emoji.value) {
          form.status_text.removeAttribute("required");
        } else {
          form.status_text.setAttribute("required", "required");
        }
      }

      Array.prototype.forEach.call(
        document.querySelectorAll('form.status-form'),
        function (form) {
          updateRequiredFields({ target: { form: form }});
          form.status_text.addEventListener("input", updateRequiredFields);
          form.status_emoji.addEventListener("input", updateRequiredFields);
        }
      )
    });
  </script>
</body>
